#!/usr/bin/env php
<?php

function getAutoload($argv){
  $dir = dirname($argv[0]);
  while(trim($dir,'/ ')){
    $dir = dirname($dir);
    if(is_file($dir . '/autoload.php')){
      break;
    }
    if(basename($dir)=='vendor'){
      break;
    }
    if((is_file($dir . '/composer.json'))&&(basename($dir)!='waxedphp')) {
      $composerConfig = json_decode(file_get_contents($dir . '/composer.json'), true);
      if ((isset($composerConfig['config']))&&(isset($composerConfig['config']['vendor-dir']))) {
        chdir($dir);
        $dir = realpath($composerConfig['config']['vendor-dir']);
      };
      break;
    }
  }
  if ((!$dir)||(!is_dir($dir))) die('Vendor directory not found.');
  $f = realpath($dir) . '/autoload.php';
  if (!is_file($f)) die('File "autoload.php" not found. ('.$f.')');
  return $f;
}

error_reporting(E_ALL);

if (version_compare(PHP_VERSION, '8.0') < 0) {
    die('Requires PHP 8.0 or above');
}
//include $_composer_autoload_path ?? getAutoload($argv);
include getAutoload($argv);
#include __DIR__ . '/../scss.inc.php';
use Waxedphp\Waxedphp\Php\Dependency;
use Waxedphp\Waxedphp\Php\Config;
use Waxedphp\Waxedphp\Php\Builders\Webpack;


 function rrmdir($dir) { 
   if (is_dir($dir)) { 
     $objects = scandir($dir);
     foreach ($objects as $object) { 
       if ($object != "." && $object != "..") { 
         if (is_dir($dir. DIRECTORY_SEPARATOR .$object) && !is_link($dir."/".$object)) {
           //rrmdir($dir. DIRECTORY_SEPARATOR .$object);
           //echo($dir. DIRECTORY_SEPARATOR .$object."\n");
         } else {
           //unlink($dir. DIRECTORY_SEPARATOR .$object); 
           echo($dir. DIRECTORY_SEPARATOR .$object."\n");
         }
       } 
     }
     //rmdir($dir); 
   } 
 }
 

$cfg = new Config();

for ($i = 1; $i < $argc; $i++) {

    if ($argv[$i] === '--help') {
      echo "
  usage: composer exec \"wax --command\"
  or: vendor/waxedphp/waxedphp/bin/wax --command
  
  commands:
  --help => show help
  --install => installs dependencies for main package waxedphp/waxedphp.
  --install-all => installs dependencies for all packages waxedphp/*
  --install=PACKAGE => installs dependencies for package waxedphp/PACKAGE
  --production => switches to production mode
  --development => switches to development mode
  --build => builds production assets using webpack (works only in development mode!)
  --clear => clears unused production assets
  --chunked => switches to chunked mode (see documentation)
  --not-chunked => switches off chunked mode
  --design-route=/html/ => sets design route (route to html templates)
  --action-route=/{ROUTE}/action/ => sets action route (route to ajax calls)
  --plugin-route=/{ROUTE}/plugin/ => sets plugin route (route to assets in development mode)
  --design-path=/var/www/waxedphp.zde/public/html/ => sets filesystem path to html templates
  --nodejs-path=/var/www/waxedphp.zde/node_modules/ => sets filesystem path to node js modules
  --assets-path=/var/www/waxedphp.zde/public/assets/ => sets filesystem path to assets in production mode
  --vocab-path=../app/Language/ => sets filesystem path to language files
  --engine=mark2 => sets mustache interpreter
  
      ";
      continue;
    }

    if ($argv[$i] === '--development') {
        $cfg->setConfig(['development' => true]);
        $usesFile = $cfg->getDataDir() . '/uses.json';
        if (!is_file($usesFile)) {
          file_put_contents($usesFile, '{}');
        };
        chmod($usesFile, 0666);
        continue;
    }
    if ($argv[$i] === '--production') {
        $cfg->setConfig(['development' => false]);
        $usesFile = $cfg->getDataDir() . '/uses.json';
        if (is_file($usesFile)) {
          chmod($usesFile, 0600);
        };
        continue;
    }
    if ($argv[$i] === '--chunked') {
        $cfg->setConfig(['chunked' => true]);
        continue;
    }
    if ($argv[$i] === '--not-chunked') {
        $cfg->setConfig(['chunked' => false]);
        continue;
    }
    if (strpos($argv[$i],'--design-route=')===0) {
        $a = explode('=', $argv[$i]);
        $cfg->setConfig(['design_route' => $a[1]]);
        continue;
    }
    if (strpos($argv[$i],'--action-route=')===0) {
        $a = explode('=', $argv[$i]);
        $cfg->setConfig(['action_route' => $a[1]]);
        continue;
    }
    if (strpos($argv[$i],'--plugin-route=')===0) {
        $a = explode('=', $argv[$i]);
        $cfg->setConfig(['plugin_route' => $a[1]]);
        continue;
    }
    if (strpos($argv[$i],'--design-path=')===0) {
        $a = explode('=', $argv[$i]);
        $cfg->setConfig(['design_path' => $a[1]]);
        continue;
    }
    if (strpos($argv[$i],'--nodejs-path=')===0) {
        $a = explode('=', $argv[$i]);
        $cfg->setConfig(['nodejs_path' => $a[1]]);
        continue;
    }
    if (strpos($argv[$i],'--assets-path=')===0) {
        $a = explode('=', $argv[$i]);
        $cfg->setConfig(['writable_path' => $a[1]]);
        continue;
    }
    if (strpos($argv[$i],'--vocab-path=')===0) {
        $a = explode('=', $argv[$i]);
        $cfg->setConfig(['vocab_path' => $a[1]]);
        continue;
    }    
    if (strpos($argv[$i],'--engine=')===0) {
        $a = explode('=', $argv[$i]);
        $cfg->setConfig(['engine' => $a[1]]);
        continue;
    }   
    if ($argv[$i] === '--build') {
        $a = $cfg->getAllUses();
        print_r($a);
        $webpack = new Webpack();
        foreach ($a as $usage) {
          $webpack->build($usage);
        }
        continue;
    }
    if ($argv[$i] === '--clear') {
        $a = $cfg->getAllUses();
        $c = $cfg->getConfig();
        print_r($a);
        $b = array_values(array_diff(scandir($c['writable_path']), array('..', '.')));
        
        foreach ($b as $folder) {
          if (strpos($folder, 'base-') === 0) {
            if (!in_array($folder, $a)) {
              print_r($folder);
              $f = $c['writable_path'] . '/' . $folder . '/main.js';
              if (is_file($f)) unlink($f);
              $f = $c['writable_path'] . '/' . $folder . '/main.css';
              if (is_file($f)) unlink($f);
              rrmdir($c['writable_path'] . '/' . $folder);
              rmdir($c['writable_path'] . '/' . $folder);
            }
          }
          //$webpack->build($usage);
        }
        continue;
    }
    
    if ($argv[$i] === '--install') {
      $dep = new Dependency(null, 'waxedphp');
      $dep->doInstallScript();
      continue;
    }

    if ($argv[$i] === '--install-all') {
      $a = scandir($cfg->getWaxedPhpDir());
      foreach($a as $name){
        if (strpos($name,'.')===0) continue;
        $dep = new Dependency(null, $name);
        $dep->doInstallScript();
      }
      continue;
    }
    
    if (strpos($argv[$i],'--install=')===0) {
      $a = explode('=', $argv[$i]);
      $dep = new Dependency(null, $a[1]);
      $dep->doInstallScript();
      continue;
    }

}

$cfg->save();
print_r($cfg->getConfig());
